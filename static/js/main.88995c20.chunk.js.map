{"version":3,"sources":["Components/Title.js","Components/Exp.js","Components/Skill.js","Components/Language.js","App.js","serviceWorker.js","index.js"],"names":["Title","_ref","sticky","title","description","react_default","a","createElement","Grid","container","item","xs","style","height","position","top","backgroundColor","justifyContent","Typography","color","variant","Exp","company","date","location","Card","elevation","borderRadius","CardContent","component","align","textAlign","Skills","tileData","GridList","cellHeight","cols","map","tile","GridListTile","key","name","src","img","alt","objectFit","GridListTileBar","Language","lang","level","stars","alignSelf","width","require","whyDidYouRender","React","theme","createMuiTheme","typography","fontSize","fontFamily","teal","palette","primary","main","secondary","App","_useState","useState","_useState2","Object","slicedToArray","experiences","setExperiences","_useState3","_useState4","skills","setSkills","_useState5","_useState6","setSticky","useEffect","axios","get","then","response","data","window","addEventListener","scrollY","console","log","ThemeProvider","Title_Title","spacing","alignContent","flexDirection","margin","padding","md","lg","Language_Language","exp","i","Exp_Exp","Skill_Skills","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88995c20.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Grid, Typography} from '@material-ui/core/'\r\n\r\n\r\nexport const Title = ({sticky, title, description}) => {\r\n  return (\r\n\r\n    <Grid container item xs={12} style={{\r\n      height: '8em',\r\n      position: sticky ? 'sticky' : 'relative',\r\n      top: sticky ? '0' : '200px',\r\n      backgroundColor: '#dcdcdc'\r\n    }}>\r\n      <Grid container item xs={12} style={{justifyContent: 'center'}}>\r\n        <Typography color={\"primary\"} variant=\"h2\">{title}</Typography>\r\n      </Grid>\r\n      <Grid container item xs={12} style={{justifyContent: 'center'}}>\r\n        <Typography color={\"primary\"} variant=\"subtitle1\">{description}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n};\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport {Grid, Card, CardContent, Typography} from '@material-ui/core/'\r\n\r\nexport const Exp = ({title, company, date, location, description}) => {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <Card elevation={0} style={{ borderRadius:'0'}}>\r\n        <CardContent>\r\n          <Typography color={\"primary\"} variant=\"h5\" component=\"h2\" align={'center'}>\r\n            {title}\r\n          </Typography>\r\n          <Typography color={\"secondary\"} variant=\"subtitle1\" component=\"h3\">\r\n            {company}\r\n          </Typography>\r\n          <Typography variant=\"subtitle2\" component=\"h3\" style={{color: '#808080', textAlign: 'right'}}>\r\n            {date}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"h2\" style={{color: '#505050', textAlign: 'left'}}>\r\n            {description}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n      )\r\n}\r\n","import React from 'react'\r\nimport {GridListTile, GridList, GridListTileBar} from '@material-ui/core/'\r\n\r\nexport const Skills = ({tileData}) => {\r\n  return (\r\n    <GridList cellHeight={160} cols={3}>\r\n      {tileData.map(tile => (\r\n        <GridListTile key={tile.name} cols={tile.cols || 1}>\r\n          <img src={tile.img} alt={tile.name} style={{objectFit: 'cover'}} />\r\n          <GridListTileBar\r\n            title={tile.name}\r\n          />\r\n        </GridListTile>\r\n      ))}\r\n    </GridList>\r\n      )\r\n};\r\n","import React from 'react'\r\nimport {Grid, Typography} from '@material-ui/core/'\r\n\r\nexport const Language = ({lang, level}) => {\r\n\r\n  const stars = level => {\r\n    switch (level) {\r\n      case 0:\r\n        return ''\r\n      case 1:\r\n        return '★'\r\n      case 2:\r\n        return '★★'\r\n      case 3:\r\n        return '★★★'\r\n      case 4:\r\n        return '★★★★'\r\n      case 5:\r\n        return '★★★★★'\r\n      default:\r\n        return '★★★★★'\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container item xs={6}>\r\n      <Grid container item xs={3} style={{justifyContent: 'center'}}>\r\n        <Typography variant=\"subtitle2\" style={{color: '#808080', alignSelf:'center'}}>{lang}</Typography>\r\n      </Grid>\r\n      <Grid container item xs={6}>\r\n        <Typography color={\"primary\"} variant=\"h5\" style={{width:'fit-content'}}>{stars(level)}</Typography>\r\n        <Typography color={\"secondary\"} variant=\"h5\" style={{width:'fit-content'}}>{stars(5-level)}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n};\r\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport {Grid, createMuiTheme, CardContent, Card} from '@material-ui/core/'\nimport {teal} from '@material-ui/core/colors';\nimport {ThemeProvider} from '@material-ui/styles';\n// import Image from './Assets/background-1.jpg';\nimport {Title} from \"./Components/Title\";\nimport {Exp} from \"./Components/Exp\";\nimport {Skills} from \"./Components/Skill\";\nimport {Language} from \"./Components/Language\";\n\nconst whyDidYouRender = require('@welldone-software/why-did-you-render');\nwhyDidYouRender(React);\n\nconst theme = createMuiTheme({\n  typography: {\n    fontSize: 15,\n    fontFamily: 'system-ui',\n    color: teal[300]\n  },\n  palette: {\n    primary: {\n      main: teal[800]\n    },\n    secondary: {\n      main: teal[300]\n    }\n\n  }\n});\n\nfunction App() {\n  const [experiences, setExperiences] = useState([]);\n  const [skills, setSkills] = useState([]);\n  const [sticky, setSticky] = useState(true);\n\n  useEffect(() => {\n    axios.get('/Experiences.json').then(response => {\n      setExperiences(response.data)\n    })\n    axios.get('/Skills.json').then(response => {\n      setSkills(response.data)\n    })\n  }, []);\n\n  const handleScroll = () => {\n    if (window.scrollY > 200) {\n      setSticky(false);\n    } else {\n      setSticky(true);\n    }\n    console.log('scrolled', window.scrollY > 200);\n  };\n  window.addEventListener('scroll', handleScroll);\n\n  const renderExp = () => {\n    return experiences.map(\n      (exp, i) => <Exp key={i}\n                       title={exp.title}\n                       company={exp.company} date={exp.date}\n                       location={exp.location}\n                       description={exp.description}/>);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div>\n        <Title sticky={sticky} title={'Sarah MAURET'} description={'Looking for a developer position in the USA.'}/>\n\n        <Grid container spacing={2} style={{\n          alignContent: 'center',\n          flexDirection: 'column',\n          width: '100%',\n          margin: '0',\n          backgroundColor: '#dcdcdc',\n          padding: '20px'\n        }}>\n          <Grid container item xs={12} md={8} lg={5} spacing={2}>\n            <Grid item xs={12}>\n              <Card elevation={0} style={{borderRadius: '0', width: '100%'}}>\n                <CardContent>\n                  <Grid container item xs={12}>\n                    <Language lang={'French'} level={5}/>\n                    <Language lang={'English'} level={5}/>\n                    <Language lang={'German'} level={3}/>\n                    <Language lang={'Spanish'} level={3}/>\n                  </Grid>\n                </CardContent>\n              </Card>\n            </Grid>\n            {renderExp()}\n          </Grid>\n          <Grid container item xs={12} md={8} lg={5} spacing={2}>\n            <Skills tileData={skills}/>\n          </Grid>\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nApp.whyDidYouRender = true;\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}